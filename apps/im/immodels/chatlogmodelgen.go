// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2

package immodels

import (
	"context"
	"go.mongodb.org/mongo-driver/mongo/options"
	"time"

	"github.com/zeromicro/go-zero/core/stores/mon"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

var DefaultChatlogCount int64 = 100

type chatLogModel interface {
	Insert(ctx context.Context, data *ChatLog) error
	FindOne(ctx context.Context, id string) (*ChatLog, error)
	Update(ctx context.Context, data *ChatLog) (*mongo.UpdateResult, error)
	UpdateMakeRead(ctx context.Context, id primitive.ObjectID, readRecords []byte) error
	Delete(ctx context.Context, id string) (int64, error)
	ListBySendTime(ctx context.Context, conversationId string, startSendTime, endSendTime, count int64) ([]*ChatLog, error)
	ListByMsgIds(ctx context.Context, msgIds []string) ([]*ChatLog, error)
}

type defaultChatLogModel struct {
	conn *mon.Model
}

func newDefaultChatLogModel(conn *mon.Model) *defaultChatLogModel {
	return &defaultChatLogModel{conn: conn}
}

func (m *defaultChatLogModel) Insert(ctx context.Context, data *ChatLog) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now()
		data.UpdateAt = time.Now()
	}

	_, err := m.conn.InsertOne(ctx, data)
	return err
}

func (m *defaultChatLogModel) FindOne(ctx context.Context, id string) (*ChatLog, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data ChatLog

	err = m.conn.FindOne(ctx, &data, bson.M{"_id": oid})
	switch err {
	case nil:
		return &data, nil
	case mon.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatLogModel) Update(ctx context.Context, data *ChatLog) (*mongo.UpdateResult, error) {
	data.UpdateAt = time.Now()

	res, err := m.conn.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return res, err
}

func (m *defaultChatLogModel) UpdateMakeRead(ctx context.Context, id primitive.ObjectID, readRecords []byte) error {
	_, err := m.conn.UpdateOne(ctx, bson.M{"_id": id}, bson.M{"$set": bson.M{
		"readRecords": readRecords,
	}})
	return err
}

func (m *defaultChatLogModel) Delete(ctx context.Context, id string) (int64, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return 0, ErrInvalidObjectId
	}

	res, err := m.conn.DeleteOne(ctx, bson.M{"_id": oid})
	return res, err
}

func (m *defaultChatLogModel) ListBySendTime(ctx context.Context, conversationId string, startSendTime, endSendTime, count int64) ([]*ChatLog, error)  {
	var data []*ChatLog

	if startSendTime == 0 {
		startSendTime = time.Now().UnixNano()
	}

	opt := options.FindOptions{
		Limit: &DefaultChatlogCount,
		Sort: bson.M{
			"sendTime": -1,
		},
	}

	filter := bson.M{
		"conversationId": conversationId,
	}
	if endSendTime > 0 {
		// startSendTime > endSendTime
		filter["sendTime"] = bson.M{"$lt": startSendTime, "$gte": endSendTime}
	} else {
		filter["sendTime"] = bson.M{"$lt": startSendTime}
	}

	if count > 0 {
		opt.Limit = &count
	}

	err := m.conn.Find(ctx, &data, filter, &opt)
	switch err {
	case nil:
		return data, nil
	case mon.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatLogModel) ListByMsgIds(ctx context.Context, msgIds []string) ([]*ChatLog, error)  {
	var data []*ChatLog

	ids := make([]primitive.ObjectID, 0, len(msgIds))

	for _, id := range msgIds {
		oid, _ := primitive.ObjectIDFromHex(id)
		ids = append(ids, oid)
	}

	filter := bson.M{
		"_id": bson.M{
			"$in": ids,
		},
	}

	err := m.conn.Find(ctx, &data, filter)
	switch err {
	case nil:
		return data, nil
	default:
		return nil, err
	}
}