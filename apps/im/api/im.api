syntax = "v1"

info (
	title:  "im消息服务实例对象"
	author: "yanko"
)

import (
	"domain.api"
)

type (
	ChatLogReq {
		MsgId          string `form:"msgId,optional"`
		ConversationId string `form:"conversationId"`
		StartSendTime  int64  `form:"startSendTime,omitempty,optional"`
		EndSendTime    int64  `form:"endSendTime,omitempty,optional"`
		Count          int64  `form:"count,omitempty,optional"`
	}
	ChatLogResp {
		List []*ChatLog `json:"list"`
	}
	GetConversationsReq  {}
	GetConversationsResp {
		ConversationList map[string]*Conversation `json:"conversationList"`
	}
	PutConversationsReq {
		ConversationList map[string]*Conversation `json:"conversationList"`
	}
	PutConversationsResp  {}
	SetUpUserConversationReq {
		RecvId   string `json:"recvId,omitempty"`
		ChatType int32  `json:"chatType,omitempty"`
	}
	setUpUserConversationResp  {}
	GetChatLogReadRecordsReq {
		MsgId string `json:"msgId"`
	}
	GetChatLogReadRecordsResp {
		Reads   []string `json:"reads"`
		UnReads []string `json:"unReads"`
	}
)

@server (
	prefix: v1/im
	jwt:    JwtAuth
)
service im {
	@doc "根据用户获取聊天记录"
	@handler getChatLog
	get /chatlog (ChatLogReq) returns (ChatLogResp)

	@handler getChatLogReadRecords
	get /chatlog/readRecords (GetChatLogReadRecordsReq) returns (GetChatLogReadRecordsResp)

	@doc "建立会话"
	@handler setUpUserConversation
	post /setup/conversation (SetUpUserConversationReq) returns (setUpUserConversationResp)

	@doc "获取会话"
	@handler getConversations
	get /conversation (GetConversationsReq) returns (GetConversationsResp)

	@doc "更新会话"
	@handler putConversations
	put /conversation (PutConversationsReq) returns (PutConversationsResp)
}

