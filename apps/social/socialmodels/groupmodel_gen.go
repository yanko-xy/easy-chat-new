// Code generated by goctl. DO NOT EDIT.

package socialmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupFieldNames          = builder.RawFieldNames(&Group{})
	groupRows                = strings.Join(groupFieldNames, ",")
	groupRowsExpectAutoSet   = strings.Join(stringx.Remove(groupFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupRowsWithPlaceHolder = strings.Join(stringx.Remove(groupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupIdPrefix = "cache:group:id:"
)

type (
	groupModel interface {
		Insert(ctx context.Context, data *Group) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Group, error)
		Update(ctx context.Context, data *Group) error
		Delete(ctx context.Context, id string) error
	}

	defaultGroupModel struct {
		sqlc.CachedConn
		table string
	}

	Group struct {
		Id              string         `db:"id"`
		Name            string         `db:"name"`
		Icon            string         `db:"icon"`
		Status          sql.NullInt64  `db:"status"`
		CreatorUid      string         `db:"creator_uid"`
		GroupType       int64          `db:"group_type"`
		IsVerify        bool           `db:"is_verify"`
		Notification    sql.NullString `db:"notification"`
		NotificationUid sql.NullString `db:"notification_uid"`
		CreatedAt       time.Time      `db:"created_at"`
		UpdatedAt       time.Time      `db:"updated_at"`
		DeletedAt       sql.NullTime   `db:"deleted_at"`
	}
)

func newGroupModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupModel {
	return &defaultGroupModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group`",
	}
}

func (m *defaultGroupModel) Delete(ctx context.Context, id string) error {
	groupIdKey := fmt.Sprintf("%s%v", cacheGroupIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, groupIdKey)
	return err
}

func (m *defaultGroupModel) FindOne(ctx context.Context, id string) (*Group, error) {
	groupIdKey := fmt.Sprintf("%s%v", cacheGroupIdPrefix, id)
	var resp Group
	err := m.QueryRowCtx(ctx, &resp, groupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupModel) Insert(ctx context.Context, data *Group) (sql.Result, error) {
	groupIdKey := fmt.Sprintf("%s%v", cacheGroupIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, groupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Icon, data.Status, data.CreatorUid, data.GroupType, data.IsVerify, data.Notification, data.NotificationUid, data.DeletedAt)
	}, groupIdKey)
	return ret, err
}

func (m *defaultGroupModel) Update(ctx context.Context, data *Group) error {
	groupIdKey := fmt.Sprintf("%s%v", cacheGroupIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Icon, data.Status, data.CreatorUid, data.GroupType, data.IsVerify, data.Notification, data.NotificationUid, data.DeletedAt, data.Id)
	}, groupIdKey)
	return err
}

func (m *defaultGroupModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGroupIdPrefix, primary)
}

func (m *defaultGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupModel) tableName() string {
	return m.table
}
